#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char* ltrim(char*);
char* rtrim(char*);
int parse_int(char*);

/*
 * Complete the 'winningLotteryTicket' function below.
 *
 * The function is expected to return a LONG_INTEGER.
 * The function accepts STRING_ARRAY tickets as parameter.
 */

long winningLotteryTicket(int tickets_count, char** tickets) {
    int freq[1024] = {0}; // there are 2^10 = 1024 possible masks
    int allDigitsMask = (1 << 10) - 1; // 1023
    long long totalPairs = 0;

    // Step 1: Calculate frequency of each bitmask
    for (int i = 0; i < tickets_count; i++) {
        int bitmask = 0;
        for (int j = 0; tickets[i][j] != '\0'; j++) {
            int digit = tickets[i][j] - '0';
            bitmask |= (1 << digit);
        }
        freq[bitmask]++;
    }

    // Step 2: Count all valid pairs
    for (int i = 0; i < 1024; i++) {
        if (freq[i] == 0) continue;

        // Case 1: Same mask forms all digits itself (mask == 1023)
        if ((i | i) == allDigitsMask && freq[i] > 1) {
            long long f = freq[i];
            totalPairs += (f * (f - 1)) / 2;
        }

        // Case 2: Different mask combinations
        for (int j = i + 1; j < 1024; j++) {
            if (freq[j] == 0) continue;
            if ((i | j) == allDigitsMask) {
                totalPairs += (long long)freq[i] * freq[j];
            }
        }
    }

    return totalPairs;
}

int main()
{
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    int n = parse_int(ltrim(rtrim(readline())));

    char** tickets = malloc(n * sizeof(char*));

    for (int i = 0; i < n; i++) {
        char* tickets_item = readline();
        *(tickets + i) = tickets_item;
    }

    long result = winningLotteryTicket(n, tickets);

    fprintf(fptr, "%ld\n", result);

    fclose(fptr);

    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;

    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) {
            break;
        }

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') {
            break;
        }

        alloc_length <<= 1;
        data = realloc(data, alloc_length);
        if (!data) {
            data = '\0';
            break;
        }
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';
        data = realloc(data, data_length);
        if (!data) {
            data = '\0';
        }
    } else {
        data = realloc(data, data_length + 1);
        if (!data) {
            data = '\0';
        } else {
            data[data_length] = '\0';
        }
    }

    return data;
}

char* ltrim(char* str) {
    if (!str) {
        return '\0';
    }

    if (!*str) {
        return str;
    }

    while (*str != '\0' && isspace(*str)) {
        str++;
    }

    return str;
}

char* rtrim(char* str) {
    if (!str) {
        return '\0';
    }

    if (!*str) {
        return str;
    }

    char* end = str + strlen(str) - 1;

    while (end >= str && isspace(*end)) {
        end--;
    }

    *(end + 1) = '\0';

    return str;
}

int parse_int(char* str) {
    char* endptr;
    int value = strtol(str, &endptr, 10);

    if (endptr == str || *endptr != '\0') {
        exit(EXIT_FAILURE);
    }

    return value;
}
